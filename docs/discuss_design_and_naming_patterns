This is a discussion of patterns in naming objects and designing tables in Metabase, both historic and forward looking. 

A few concepts:
The GCE_Metabase names follow these patterns:
  DataSetThing
    things at the dataset level such as keywords, methods, coverages, people
  DataSetEntityThing
    things at the entity level such as the entities themselves, 
    and in the full model, entity-level methods, coverages, which are not used much and dropped from the mini versions
    and of course the entities themselves
  DataSetVariableThing
    unfortunately uses "Variable" but means "Attribute". 
    things at the attribute level
      such as coverages (again, full not mini, not much used), methods (ditto)
      and of course the attributeList
  EMLThingList
    controlled vocabularies
    such as: measurement scale list, storage types, units
    Technically, units are not just an EML thing, but an stmml thing.
  ThingList
    controlled vocabularies
    such as SiteTypeList, VariableTypeList, SubPathList
    most (perhaps all) of these are not in mini, and most I would consider vestigal.
    
 Overall observations about the above naming conventions inherited from the GCE naming pattern:
 List 
    means a controlled vocabulary.
    I use cv_ in my own db designs for these. Same concept, different string pattern.
 ScopeThing 
    means that thing at that scope (or block, or level) of the EML
    I suggest that since an attribute always belongs to an entity, and an entity always belongs to a dataset, that we shorten this pattern.
    Instead of DataSetEntityAttributeEnumeration it would be AttributeEnumeration (this table is not currently named that)
    So there would be tables that begin with DataSet, with Entity and with Attribute, not DataSetEntityAttributeThing.
    (I'll discuss di,ei,ai below)
 xref   
    I am not seeing a table naming pattern that says "I am a cross-reference table." 
    In my own db designs I use the string suffix _xref
      a_b_xref would be a many-to-many between thing a and thing b.
      for example my projectStub schema.
      In the GCE naming pattern, here are some xref table names, from full Metabase
        CommitteeMember
        DataSetDependencies
        DataSetKeywords
        DataSetLocations
        DataSetPersonnel
        ... and many more
      So in the GCE naming pattern, knowing it is an xref table is dependent on knowing the data model itself, what things are many-to-many with what other things. No clue from the table name directly (such as _xref).
      
        
 
    
